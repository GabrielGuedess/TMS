// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Interface.Migrations
{
    [DbContext(typeof(TMSContext))]
    partial class TMSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("Interface.ModelsDB.carroceria", b =>
                {
                    b.Property<int>("ID_carroceira")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<double>("Capacidade_KG")
                        .HasColumnType("double(6,3) unsigned");

                    b.Property<double>("Capacidade_volumetrica")
                        .HasColumnType("double(6,3) unsigned");

                    b.Property<string>("Descricao_carroceira")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<uint>("Eixo_carroceria")
                        .HasColumnType("int(10) unsigned");

                    b.Property<int>("ID_for_modelo")
                        .HasColumnType("int(11)");

                    b.Property<double>("Massa_carroceria")
                        .HasColumnType("double(6,3) unsigned");

                    b.HasKey("ID_carroceira")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ID_for_modelo" }, "FK_modelo");

                    b.ToTable("carroceria");
                });

            modelBuilder.Entity("Interface.ModelsDB.celularcliente", b =>
                {
                    b.Property<int>("ID_celular")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<int>("ID_for_cliente")
                        .HasColumnType("int(11)");

                    b.HasKey("ID_celular")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Celular" }, "Celular")
                        .IsUnique();

                    b.HasIndex(new[] { "ID_for_cliente" }, "FK_cliente4");

                    b.ToTable("celularcliente");
                });

            modelBuilder.Entity("Interface.ModelsDB.celularfuncionario", b =>
                {
                    b.Property<int>("ID_celular")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<int>("ID_for_funcionario")
                        .HasColumnType("int(11)");

                    b.HasKey("ID_celular")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Celular" }, "Celular")
                        .IsUnique()
                        .HasDatabaseName("Celular1");

                    b.HasIndex(new[] { "ID_for_funcionario" }, "FK_funcionario2");

                    b.ToTable("celularfuncionario");
                });

            modelBuilder.Entity("Interface.ModelsDB.celularmotoristaterceiro", b =>
                {
                    b.Property<int>("ID_celular")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<int>("ID_for_motorista")
                        .HasColumnType("int(11)");

                    b.HasKey("ID_celular")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Celular" }, "Celular")
                        .IsUnique()
                        .HasDatabaseName("Celular2");

                    b.HasIndex(new[] { "ID_for_motorista" }, "FK_terceiro4");

                    b.ToTable("celularmotoristaterceiro");
                });

            modelBuilder.Entity("Interface.ModelsDB.cliente", b =>
                {
                    b.Property<int>("ID_cliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Complemento_endereco")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Numero_endereco")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.HasKey("ID_cliente")
                        .HasName("PRIMARY");

                    b.ToTable("cliente");
                });

            modelBuilder.Entity("Interface.ModelsDB.clientefisico", b =>
                {
                    b.Property<int>("ID_for_cliente")
                        .HasColumnType("int(11)");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<DateOnly>("Data_nascimento")
                        .HasColumnType("date");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("RG")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("ID_for_cliente")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CPF" }, "CPF")
                        .IsUnique();

                    b.HasIndex(new[] { "RG" }, "RG")
                        .IsUnique();

                    b.ToTable("clientefisico");
                });

            modelBuilder.Entity("Interface.ModelsDB.clientejuridico", b =>
                {
                    b.Property<int>("ID_for_cliente")
                        .HasColumnType("int(11)");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Inscricao_estadual")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)");

                    b.Property<string>("Nome_fantasia")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Razao_social")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.HasKey("ID_for_cliente")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CNPJ" }, "CNPJ")
                        .IsUnique();

                    b.HasIndex(new[] { "Inscricao_estadual" }, "Inscricao_estadual")
                        .IsUnique();

                    b.HasIndex(new[] { "Nome_fantasia" }, "Nome_fantasia")
                        .IsUnique();

                    b.HasIndex(new[] { "Razao_social" }, "Razao_social")
                        .IsUnique();

                    b.ToTable("clientejuridico");
                });

            modelBuilder.Entity("Interface.ModelsDB.contratomotoristaterceiro", b =>
                {
                    b.Property<int>("ID_contrato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateOnly>("Fim_contrato")
                        .HasColumnType("date");

                    b.Property<int>("ID_for_motorista")
                        .HasColumnType("int(11)");

                    b.Property<DateOnly>("Inicio_contrato")
                        .HasColumnType("date");

                    b.Property<string>("Situacao_contrato")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Tipo_contrato")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Veiculo_proprio")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.HasKey("ID_contrato")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ID_for_motorista" }, "FK_terceiro");

                    b.ToTable("contratomotoristaterceiro");
                });

            modelBuilder.Entity("Interface.ModelsDB.emailcliente", b =>
                {
                    b.Property<int>("ID_email")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)");

                    b.Property<int>("ID_for_cliente")
                        .HasColumnType("int(11)");

                    b.HasKey("ID_email")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "Email")
                        .IsUnique();

                    b.HasIndex(new[] { "ID_for_cliente" }, "FK_cliente5");

                    b.ToTable("emailcliente");
                });

            modelBuilder.Entity("Interface.ModelsDB.emailfuncionario", b =>
                {
                    b.Property<int>("ID_email")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)");

                    b.Property<int>("ID_for_funcionario")
                        .HasColumnType("int(11)");

                    b.HasKey("ID_email")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "Email")
                        .IsUnique()
                        .HasDatabaseName("Email1");

                    b.HasIndex(new[] { "ID_for_funcionario" }, "FK_funcionario3");

                    b.ToTable("emailfuncionario");
                });

            modelBuilder.Entity("Interface.ModelsDB.emailmotoristaterceiro", b =>
                {
                    b.Property<int>("ID_email")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)");

                    b.Property<int>("ID_for_motorista")
                        .HasColumnType("int(11)");

                    b.HasKey("ID_email")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "Email")
                        .IsUnique()
                        .HasDatabaseName("Email2");

                    b.HasIndex(new[] { "ID_for_motorista" }, "FK_terceiro3");

                    b.ToTable("emailmotoristaterceiro");
                });

            modelBuilder.Entity("Interface.ModelsDB.marca", b =>
                {
                    b.Property<int>("ID_marca")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Nome_marca")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.HasKey("ID_marca")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Nome_marca" }, "Nome_marca")
                        .IsUnique();

                    b.ToTable("marca");
                });

            modelBuilder.Entity("Interface.ModelsDB.mercadoria", b =>
                {
                    b.Property<int>("ID_mercadoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<int>("ID_for_cliente")
                        .HasColumnType("int(11)");

                    b.Property<int>("ID_for_pedido")
                        .HasColumnType("int(11)");

                    b.Property<double>("Massa")
                        .HasColumnType("double(6,3) unsigned");

                    b.Property<double>("Valor")
                        .HasColumnType("double(9,2) unsigned");

                    b.Property<double>("Volume")
                        .HasColumnType("double(6,3) unsigned");

                    b.HasKey("ID_mercadoria")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ID_for_pedido" }, "FK_mercadoria");

                    b.HasIndex(new[] { "ID_for_cliente" }, "FK_mercadoria2");

                    b.ToTable("mercadoria");
                });

            modelBuilder.Entity("Interface.ModelsDB.modelo", b =>
                {
                    b.Property<int>("ID_modelo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<uint>("Eixo_modelo")
                        .HasColumnType("int(10) unsigned");

                    b.Property<int>("ID_for_marca")
                        .HasColumnType("int(11)");

                    b.Property<double>("Massa_modelo")
                        .HasColumnType("double(6,3) unsigned");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("ID_modelo")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ID_for_marca" }, "FK_marca2");

                    b.ToTable("modelo");
                });

            modelBuilder.Entity("Interface.ModelsDB.motorista", b =>
                {
                    b.Property<int>("ID_motorista")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Categoria_CNH")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Complemento_endereco")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Curso_MOPP")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<DateOnly>("Data_nascimento")
                        .HasColumnType("date");

                    b.Property<string>("Disponibilidade")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Numero_CNH")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Numero_endereco")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("RG")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<DateOnly>("Vencimento_CNH")
                        .HasColumnType("date");

                    b.HasKey("ID_motorista")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CPF" }, "CPF")
                        .IsUnique()
                        .HasDatabaseName("CPF1");

                    b.HasIndex(new[] { "Numero_CNH" }, "Numero_CNH")
                        .IsUnique();

                    b.HasIndex(new[] { "RG" }, "RG")
                        .IsUnique()
                        .HasDatabaseName("RG1");

                    b.ToTable("motorista");
                });

            modelBuilder.Entity("Interface.ModelsDB.motoristaterceiro", b =>
                {
                    b.Property<int>("ID_motorista_terceiro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Categoria_CNH")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Complemento_endereco")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Curso_MOPP")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<DateOnly>("Data_nascimento")
                        .HasColumnType("date");

                    b.Property<string>("Disponibilidade")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Numero_CNH")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Numero_endereco")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("RG")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<DateOnly>("Vencimento_CNH")
                        .HasColumnType("date");

                    b.HasKey("ID_motorista_terceiro")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CPF" }, "CPF")
                        .IsUnique()
                        .HasDatabaseName("CPF2");

                    b.HasIndex(new[] { "Numero_CNH" }, "Numero_CNH")
                        .IsUnique()
                        .HasDatabaseName("Numero_CNH1");

                    b.HasIndex(new[] { "RG" }, "RG")
                        .IsUnique()
                        .HasDatabaseName("RG2");

                    b.ToTable("motoristaterceiro");
                });

            modelBuilder.Entity("Interface.ModelsDB.notafiscal", b =>
                {
                    b.Property<int>("ID_nota_fiscal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Chave_acesso")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Serie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID_nota_fiscal")
                        .HasName("PRIMARY");

                    b.ToTable("notafiscal");
                });

            modelBuilder.Entity("Interface.ModelsDB.pedidocliente", b =>
                {
                    b.Property<int>("ID_pedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Bairro_destino")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("CEP_destino")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Cidade_destino")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Complemento_endereco")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<int>("ID_for_cliente")
                        .HasColumnType("int(11)");

                    b.Property<string>("Logradouro_destino")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Numero_destino")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("UF_destino")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.HasKey("ID_pedido")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ID_for_cliente" }, "FK_pedido");

                    b.ToTable("pedidocliente");
                });

            modelBuilder.Entity("Interface.ModelsDB.pessoajuridica", b =>
                {
                    b.Property<int>("ID_usuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Complemento_endereco")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("Inscricao_estadual")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Nome_fantasia")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Numero_endereco")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Razao_social")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.HasKey("ID_usuario")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CNPJ" }, "CNPJ")
                        .IsUnique()
                        .HasDatabaseName("CNPJ1");

                    b.HasIndex(new[] { "Celular" }, "Celular")
                        .IsUnique()
                        .HasDatabaseName("Celular3");

                    b.HasIndex(new[] { "Email" }, "Email")
                        .IsUnique()
                        .HasDatabaseName("Email3");

                    b.HasIndex(new[] { "Inscricao_estadual" }, "Inscricao_estadual")
                        .IsUnique()
                        .HasDatabaseName("Inscricao_estadual1");

                    b.HasIndex(new[] { "Nome_fantasia" }, "Nome_fantasia")
                        .IsUnique()
                        .HasDatabaseName("Nome_fantasia1");

                    b.HasIndex(new[] { "Razao_social" }, "Razao_social")
                        .IsUnique()
                        .HasDatabaseName("Razao_social1");

                    b.HasIndex(new[] { "Telefone" }, "Telefone")
                        .IsUnique();

                    b.ToTable("pessoajuridica");
                });

            modelBuilder.Entity("Interface.ModelsDB.processopedido", b =>
                {
                    b.Property<int>("ID_processo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateOnly>("DATA_fim")
                        .HasColumnType("date");

                    b.Property<DateOnly>("Data_inicio")
                        .HasColumnType("date");

                    b.Property<double>("Gasto_total")
                        .HasColumnType("double(9,2) unsigned");

                    b.Property<int>("ID_for_motorista")
                        .HasColumnType("int(11)");

                    b.Property<int>("ID_for_retorno")
                        .HasColumnType("int(11)");

                    b.Property<int>("ID_for_rota")
                        .HasColumnType("int(11)");

                    b.Property<int>("ID_for_veiculo")
                        .HasColumnType("int(11)");

                    b.Property<double>("KM_total")
                        .HasColumnType("double(6,3) unsigned");

                    b.HasKey("ID_processo")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ID_for_rota" }, "FK_processo");

                    b.HasIndex(new[] { "ID_for_retorno" }, "FK_processo2");

                    b.HasIndex(new[] { "ID_for_veiculo" }, "FK_processo3");

                    b.HasIndex(new[] { "ID_for_motorista" }, "FK_processo4");

                    b.ToTable("processopedido");
                });

            modelBuilder.Entity("Interface.ModelsDB.redetransporte", b =>
                {
                    b.Property<int>("ID_rede")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Categoria_CNH")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Tipo_rede")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Tipo_veiculo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("ID_rede")
                        .HasName("PRIMARY");

                    b.ToTable("redetransporte");
                });

            modelBuilder.Entity("Interface.ModelsDB.rota", b =>
                {
                    b.Property<int>("ID_rota")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("ID_for_pedido")
                        .HasColumnType("int(11)");

                    b.Property<string>("Bairro_partida")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("CEP_partida")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Cidade_partida")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Complemento_partida")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<DateOnly>("Data_fim")
                        .HasColumnType("date");

                    b.Property<DateOnly>("Data_inicio")
                        .HasColumnType("date");

                    b.Property<double>("Distancia_KM")
                        .HasColumnType("double(6,3) unsigned");

                    b.Property<double>("Gasto_combustivel_reais")
                        .HasColumnType("double(9,2) unsigned");

                    b.Property<double>("Gasto_pedagio_reais")
                        .HasColumnType("double(6,2) unsigned");

                    b.Property<string>("Logradouro_partida")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Numero_partida")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("UF_partida")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.HasKey("ID_rota", "ID_for_pedido")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ID_for_pedido" }, "FK_rota");

                    b.ToTable("rota");
                });

            modelBuilder.Entity("Interface.ModelsDB.rotaretorno", b =>
                {
                    b.Property<int>("ID_retorno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateOnly>("Data_fim")
                        .HasColumnType("date");

                    b.Property<DateOnly>("Data_inicio")
                        .HasColumnType("date");

                    b.Property<double>("Distancia_KM")
                        .HasColumnType("double(6,3) unsigned");

                    b.Property<double>("Gasto_combustivel_reais")
                        .HasColumnType("double(9,2) unsigned");

                    b.Property<double>("Gasto_pedagio_reais")
                        .HasColumnType("double(6,2) unsigned");

                    b.Property<int>("ID_for_pedido")
                        .HasColumnType("int(11)");

                    b.Property<int>("ID_for_rota")
                        .HasColumnType("int(11)");

                    b.HasKey("ID_retorno")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ID_for_rota" }, "FK_retorno");

                    b.HasIndex(new[] { "ID_for_pedido" }, "FK_retorno2");

                    b.ToTable("rotaretorno");
                });

            modelBuilder.Entity("Interface.ModelsDB.sinistro", b =>
                {
                    b.Property<int>("ID_Sinistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Tipo_sinistro")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("ID_Sinistro")
                        .HasName("PRIMARY");

                    b.ToTable("sinistro");
                });

            modelBuilder.Entity("Interface.ModelsDB.tarifasetaxas", b =>
                {
                    b.Property<int>("ID_ta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Nome_empresa")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Tarifa_ou_taxa")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.HasKey("ID_ta")
                        .HasName("PRIMARY");

                    b.ToTable("tarifasetaxas");
                });

            modelBuilder.Entity("Interface.ModelsDB.telefonecliente", b =>
                {
                    b.Property<int>("ID_telefone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("ID_for_cliente")
                        .HasColumnType("int(11)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("ID_telefone")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ID_for_cliente" }, "FK_cliente3");

                    b.HasIndex(new[] { "Telefone" }, "Telefone")
                        .IsUnique()
                        .HasDatabaseName("Telefone1");

                    b.ToTable("telefonecliente");
                });

            modelBuilder.Entity("Interface.ModelsDB.telefonefuncionario", b =>
                {
                    b.Property<int>("ID_telefone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("ID_for_funcionario")
                        .HasColumnType("int(11)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("ID_telefone")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ID_for_funcionario" }, "FK_funcionario");

                    b.HasIndex(new[] { "Telefone" }, "Telefone")
                        .IsUnique()
                        .HasDatabaseName("Telefone2");

                    b.ToTable("telefonefuncionario");
                });

            modelBuilder.Entity("Interface.ModelsDB.telefonemotoristaterceiro", b =>
                {
                    b.Property<int>("ID_telefone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("ID_for_motorista")
                        .HasColumnType("int(11)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("ID_telefone")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ID_for_motorista" }, "FK_terceiro5");

                    b.HasIndex(new[] { "Telefone" }, "Telefone")
                        .IsUnique()
                        .HasDatabaseName("Telefone3");

                    b.ToTable("telefonemotoristaterceiro");
                });

            modelBuilder.Entity("Interface.ModelsDB.usuario", b =>
                {
                    b.Property<int>("ID_usuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("User_name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID_usuario")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CPF" }, "CPF")
                        .IsUnique()
                        .HasDatabaseName("CPF3");

                    b.HasIndex(new[] { "Celular" }, "Celular")
                        .IsUnique()
                        .HasDatabaseName("Celular4");

                    b.HasIndex(new[] { "Email" }, "Email")
                        .IsUnique()
                        .HasDatabaseName("Email4");

                    b.HasIndex(new[] { "Telefone" }, "Telefone")
                        .IsUnique()
                        .HasDatabaseName("Telefone4");

                    b.HasIndex(new[] { "User_name" }, "User_name")
                        .IsUnique();

                    b.ToTable("usuario");
                });

            modelBuilder.Entity("Interface.ModelsDB.veiculo", b =>
                {
                    b.Property<int>("ID_veiculo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<short>("Ano_fabricacao")
                        .HasColumnType("year(4)");

                    b.Property<string>("Cod_CIOT")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Cod_RENAVAM")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Cod_RNTRC")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Cor")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Disponibilidade")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<int>("ID_for_marca")
                        .HasColumnType("int(11)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)");

                    b.Property<DateOnly>("Vencimento_RNTRC")
                        .HasColumnType("date");

                    b.HasKey("ID_veiculo")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Cod_CIOT" }, "Cod_CIOT")
                        .IsUnique();

                    b.HasIndex(new[] { "Cod_RENAVAM" }, "Cod_RENAVAM")
                        .IsUnique();

                    b.HasIndex(new[] { "Cod_RNTRC" }, "Cod_RNTRC")
                        .IsUnique();

                    b.HasIndex(new[] { "ID_for_marca" }, "FK_marca");

                    b.HasIndex(new[] { "Placa" }, "Placa")
                        .IsUnique();

                    b.ToTable("veiculo");
                });

            modelBuilder.Entity("Interface.ModelsDB.veiculoterceiro", b =>
                {
                    b.Property<int>("ID_veiculo_terceiro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<short>("Ano_fabricao")
                        .HasColumnType("year(4)");

                    b.Property<double>("Capacidade_KG")
                        .HasColumnType("double(6,3)");

                    b.Property<double>("Capacidade_volumetrican")
                        .HasColumnType("double(6,3)");

                    b.Property<string>("Carroceria")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Cod_CIOT")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Cod_RENAVAM")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Cod_RNTRC")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<int>("Eixo_carroceria")
                        .HasColumnType("int(11)");

                    b.Property<int>("Eixo_modelo")
                        .HasColumnType("int(11)");

                    b.Property<int>("ID_for_motorista")
                        .HasColumnType("int(11)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<double>("Massa_carroceria")
                        .HasColumnType("double(6,3)");

                    b.Property<double>("Massa_modelo")
                        .HasColumnType("double(6,3)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)");

                    b.Property<DateOnly>("Vencimento_RNTRC")
                        .HasColumnType("date");

                    b.HasKey("ID_veiculo_terceiro")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Cod_CIOT" }, "Cod_CIOT")
                        .IsUnique()
                        .HasDatabaseName("Cod_CIOT1");

                    b.HasIndex(new[] { "Cod_RENAVAM" }, "Cod_RENAVAM")
                        .IsUnique()
                        .HasDatabaseName("Cod_RENAVAM1");

                    b.HasIndex(new[] { "Cod_RNTRC" }, "Cod_RNTRC")
                        .IsUnique()
                        .HasDatabaseName("Cod_RNTRC1");

                    b.HasIndex(new[] { "ID_for_motorista" }, "FK_terceiro2");

                    b.HasIndex(new[] { "Placa" }, "Placa")
                        .IsUnique()
                        .HasDatabaseName("Placa1");

                    b.ToTable("veiculoterceiro");
                });

            modelBuilder.Entity("Interface.ModelsDB.carroceria", b =>
                {
                    b.HasOne("Interface.ModelsDB.modelo", "ID_for_modeloNavigation")
                        .WithMany("carroceria")
                        .HasForeignKey("ID_for_modelo")
                        .IsRequired()
                        .HasConstraintName("FK_modelo");

                    b.Navigation("ID_for_modeloNavigation");
                });

            modelBuilder.Entity("Interface.ModelsDB.celularcliente", b =>
                {
                    b.HasOne("Interface.ModelsDB.cliente", "ID_for_clienteNavigation")
                        .WithMany("celularcliente")
                        .HasForeignKey("ID_for_cliente")
                        .IsRequired()
                        .HasConstraintName("FK_cliente4");

                    b.Navigation("ID_for_clienteNavigation");
                });

            modelBuilder.Entity("Interface.ModelsDB.celularfuncionario", b =>
                {
                    b.HasOne("Interface.ModelsDB.motorista", "ID_for_funcionarioNavigation")
                        .WithMany("celularfuncionario")
                        .HasForeignKey("ID_for_funcionario")
                        .IsRequired()
                        .HasConstraintName("FK_funcionario2");

                    b.Navigation("ID_for_funcionarioNavigation");
                });

            modelBuilder.Entity("Interface.ModelsDB.celularmotoristaterceiro", b =>
                {
                    b.HasOne("Interface.ModelsDB.motoristaterceiro", "ID_for_motoristaNavigation")
                        .WithMany("celularmotoristaterceiro")
                        .HasForeignKey("ID_for_motorista")
                        .IsRequired()
                        .HasConstraintName("FK_terceiro4");

                    b.Navigation("ID_for_motoristaNavigation");
                });

            modelBuilder.Entity("Interface.ModelsDB.clientefisico", b =>
                {
                    b.HasOne("Interface.ModelsDB.cliente", "ID_for_clienteNavigation")
                        .WithOne("clientefisico")
                        .HasForeignKey("Interface.ModelsDB.clientefisico", "ID_for_cliente")
                        .IsRequired()
                        .HasConstraintName("FK_cliente2");

                    b.Navigation("ID_for_clienteNavigation");
                });

            modelBuilder.Entity("Interface.ModelsDB.clientejuridico", b =>
                {
                    b.HasOne("Interface.ModelsDB.cliente", "ID_for_clienteNavigation")
                        .WithOne("clientejuridico")
                        .HasForeignKey("Interface.ModelsDB.clientejuridico", "ID_for_cliente")
                        .IsRequired()
                        .HasConstraintName("FK_cliente");

                    b.Navigation("ID_for_clienteNavigation");
                });

            modelBuilder.Entity("Interface.ModelsDB.contratomotoristaterceiro", b =>
                {
                    b.HasOne("Interface.ModelsDB.motoristaterceiro", "ID_for_motoristaNavigation")
                        .WithMany("contratomotoristaterceiro")
                        .HasForeignKey("ID_for_motorista")
                        .IsRequired()
                        .HasConstraintName("FK_terceiro");

                    b.Navigation("ID_for_motoristaNavigation");
                });

            modelBuilder.Entity("Interface.ModelsDB.emailcliente", b =>
                {
                    b.HasOne("Interface.ModelsDB.cliente", "ID_for_clienteNavigation")
                        .WithMany("emailcliente")
                        .HasForeignKey("ID_for_cliente")
                        .IsRequired()
                        .HasConstraintName("FK_cliente5");

                    b.Navigation("ID_for_clienteNavigation");
                });

            modelBuilder.Entity("Interface.ModelsDB.emailfuncionario", b =>
                {
                    b.HasOne("Interface.ModelsDB.motorista", "ID_for_funcionarioNavigation")
                        .WithMany("emailfuncionario")
                        .HasForeignKey("ID_for_funcionario")
                        .IsRequired()
                        .HasConstraintName("FK_funcionario3");

                    b.Navigation("ID_for_funcionarioNavigation");
                });

            modelBuilder.Entity("Interface.ModelsDB.emailmotoristaterceiro", b =>
                {
                    b.HasOne("Interface.ModelsDB.motoristaterceiro", "ID_for_motoristaNavigation")
                        .WithMany("emailmotoristaterceiro")
                        .HasForeignKey("ID_for_motorista")
                        .IsRequired()
                        .HasConstraintName("FK_terceiro3");

                    b.Navigation("ID_for_motoristaNavigation");
                });

            modelBuilder.Entity("Interface.ModelsDB.mercadoria", b =>
                {
                    b.HasOne("Interface.ModelsDB.cliente", "ID_for_clienteNavigation")
                        .WithMany("mercadoria")
                        .HasForeignKey("ID_for_cliente")
                        .IsRequired()
                        .HasConstraintName("FK_mercadoria2");

                    b.HasOne("Interface.ModelsDB.pedidocliente", "ID_for_pedidoNavigation")
                        .WithMany("mercadoria")
                        .HasForeignKey("ID_for_pedido")
                        .IsRequired()
                        .HasConstraintName("FK_mercadoria");

                    b.Navigation("ID_for_clienteNavigation");

                    b.Navigation("ID_for_pedidoNavigation");
                });

            modelBuilder.Entity("Interface.ModelsDB.modelo", b =>
                {
                    b.HasOne("Interface.ModelsDB.marca", "ID_for_marcaNavigation")
                        .WithMany("modelo")
                        .HasForeignKey("ID_for_marca")
                        .IsRequired()
                        .HasConstraintName("FK_marca2");

                    b.Navigation("ID_for_marcaNavigation");
                });

            modelBuilder.Entity("Interface.ModelsDB.pedidocliente", b =>
                {
                    b.HasOne("Interface.ModelsDB.cliente", "ID_for_clienteNavigation")
                        .WithMany("pedidocliente")
                        .HasForeignKey("ID_for_cliente")
                        .IsRequired()
                        .HasConstraintName("FK_pedido");

                    b.Navigation("ID_for_clienteNavigation");
                });

            modelBuilder.Entity("Interface.ModelsDB.processopedido", b =>
                {
                    b.HasOne("Interface.ModelsDB.motorista", "ID_for_motoristaNavigation")
                        .WithMany("processopedido")
                        .HasForeignKey("ID_for_motorista")
                        .IsRequired()
                        .HasConstraintName("FK_processo4");

                    b.HasOne("Interface.ModelsDB.rotaretorno", "ID_for_retornoNavigation")
                        .WithMany("processopedido")
                        .HasForeignKey("ID_for_retorno")
                        .IsRequired()
                        .HasConstraintName("FK_processo2");

                    b.HasOne("Interface.ModelsDB.veiculo", "ID_for_veiculoNavigation")
                        .WithMany("processopedido")
                        .HasForeignKey("ID_for_veiculo")
                        .IsRequired()
                        .HasConstraintName("FK_processo3");

                    b.Navigation("ID_for_motoristaNavigation");

                    b.Navigation("ID_for_retornoNavigation");

                    b.Navigation("ID_for_veiculoNavigation");
                });

            modelBuilder.Entity("Interface.ModelsDB.rota", b =>
                {
                    b.HasOne("Interface.ModelsDB.pedidocliente", "ID_for_pedidoNavigation")
                        .WithMany("rota")
                        .HasForeignKey("ID_for_pedido")
                        .IsRequired()
                        .HasConstraintName("FK_rota");

                    b.Navigation("ID_for_pedidoNavigation");
                });

            modelBuilder.Entity("Interface.ModelsDB.rotaretorno", b =>
                {
                    b.HasOne("Interface.ModelsDB.pedidocliente", "ID_for_pedidoNavigation")
                        .WithMany("rotaretorno")
                        .HasForeignKey("ID_for_pedido")
                        .IsRequired()
                        .HasConstraintName("FK_retorno2");

                    b.Navigation("ID_for_pedidoNavigation");
                });

            modelBuilder.Entity("Interface.ModelsDB.telefonecliente", b =>
                {
                    b.HasOne("Interface.ModelsDB.cliente", "ID_for_clienteNavigation")
                        .WithMany("telefonecliente")
                        .HasForeignKey("ID_for_cliente")
                        .IsRequired()
                        .HasConstraintName("FK_cliente3");

                    b.Navigation("ID_for_clienteNavigation");
                });

            modelBuilder.Entity("Interface.ModelsDB.telefonefuncionario", b =>
                {
                    b.HasOne("Interface.ModelsDB.motorista", "ID_for_funcionarioNavigation")
                        .WithMany("telefonefuncionario")
                        .HasForeignKey("ID_for_funcionario")
                        .IsRequired()
                        .HasConstraintName("FK_funcionario");

                    b.Navigation("ID_for_funcionarioNavigation");
                });

            modelBuilder.Entity("Interface.ModelsDB.telefonemotoristaterceiro", b =>
                {
                    b.HasOne("Interface.ModelsDB.motoristaterceiro", "ID_for_motoristaNavigation")
                        .WithMany("telefonemotoristaterceiro")
                        .HasForeignKey("ID_for_motorista")
                        .IsRequired()
                        .HasConstraintName("FK_terceiro5");

                    b.Navigation("ID_for_motoristaNavigation");
                });

            modelBuilder.Entity("Interface.ModelsDB.veiculo", b =>
                {
                    b.HasOne("Interface.ModelsDB.marca", "ID_for_marcaNavigation")
                        .WithMany("veiculo")
                        .HasForeignKey("ID_for_marca")
                        .IsRequired()
                        .HasConstraintName("FK_marca");

                    b.Navigation("ID_for_marcaNavigation");
                });

            modelBuilder.Entity("Interface.ModelsDB.veiculoterceiro", b =>
                {
                    b.HasOne("Interface.ModelsDB.motoristaterceiro", "ID_for_motoristaNavigation")
                        .WithMany("veiculoterceiro")
                        .HasForeignKey("ID_for_motorista")
                        .IsRequired()
                        .HasConstraintName("FK_terceiro2");

                    b.Navigation("ID_for_motoristaNavigation");
                });

            modelBuilder.Entity("Interface.ModelsDB.cliente", b =>
                {
                    b.Navigation("celularcliente");

                    b.Navigation("clientefisico");

                    b.Navigation("clientejuridico");

                    b.Navigation("emailcliente");

                    b.Navigation("mercadoria");

                    b.Navigation("pedidocliente");

                    b.Navigation("telefonecliente");
                });

            modelBuilder.Entity("Interface.ModelsDB.marca", b =>
                {
                    b.Navigation("modelo");

                    b.Navigation("veiculo");
                });

            modelBuilder.Entity("Interface.ModelsDB.modelo", b =>
                {
                    b.Navigation("carroceria");
                });

            modelBuilder.Entity("Interface.ModelsDB.motorista", b =>
                {
                    b.Navigation("celularfuncionario");

                    b.Navigation("emailfuncionario");

                    b.Navigation("processopedido");

                    b.Navigation("telefonefuncionario");
                });

            modelBuilder.Entity("Interface.ModelsDB.motoristaterceiro", b =>
                {
                    b.Navigation("celularmotoristaterceiro");

                    b.Navigation("contratomotoristaterceiro");

                    b.Navigation("emailmotoristaterceiro");

                    b.Navigation("telefonemotoristaterceiro");

                    b.Navigation("veiculoterceiro");
                });

            modelBuilder.Entity("Interface.ModelsDB.pedidocliente", b =>
                {
                    b.Navigation("mercadoria");

                    b.Navigation("rota");

                    b.Navigation("rotaretorno");
                });

            modelBuilder.Entity("Interface.ModelsDB.rotaretorno", b =>
                {
                    b.Navigation("processopedido");
                });

            modelBuilder.Entity("Interface.ModelsDB.veiculo", b =>
                {
                    b.Navigation("processopedido");
                });
#pragma warning restore 612, 618
        }
    }
}
